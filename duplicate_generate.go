//go:build ignore

// types_generate.go is meant to run with go generate. It will use
// go/{importer,types} to track down all the RR struct types. Then for each type
// it will generate conversion tables (TypeToRR and TypeToString) and banal
// methods (len, Header, copy) based on the struct tags. The generated source is
// written to ztypes.go, and is meant to be checked into git.
package main

import (
	"bytes"
	"fmt"
	"go/format"
	"go/types"
	"log"
	"os"

	"golang.org/x/tools/go/packages"
)

var packageHdr = `
// Code generated by "go run duplicate_generate.go"; DO NOT EDIT.

package dns

import (
	"slices"
)

`

func getTypeStruct(t types.Type, scope *types.Scope) (*types.Struct, bool) {
	st, ok := t.Underlying().(*types.Struct)
	if !ok {
		return nil, false
	}
	if st.NumFields() == 0 {
		return nil, false
	}
	if st.Field(0).Type() == scope.Lookup("RR_Header").Type() {
		return st, false
	}
	if st.Field(0).Anonymous() {
		st, _ := getTypeStruct(st.Field(0).Type(), scope)
		return st, true
	}
	return nil, false
}

// loadModule retrieves package description for a given module.
func loadModule(name string) (*types.Package, error) {
	conf := packages.Config{Mode: packages.NeedTypes | packages.NeedTypesInfo}
	pkgs, err := packages.Load(&conf, name)
	if err != nil {
		return nil, err
	}
	return pkgs[0].Types, nil
}

func main() {
	// Import and type-check the package
	pkg, err := loadModule("github.com/monoidic/dns")
	fatalIfErr(err)
	scope := pkg.Scope()

	// Collect actual types (*X)
	var namedTypes []string
	for _, name := range scope.Names() {
		o := scope.Lookup(name)
		if o == nil || !o.Exported() {
			continue
		}

		if st, _ := getTypeStruct(o.Type(), scope); st == nil {
			continue
		}

		if name == "PrivateRR" || name == "OPT" {
			continue
		}

		namedTypes = append(namedTypes, o.Name())
	}

	b := &bytes.Buffer{}
	b.WriteString(packageHdr)

	// Generate the duplicate check for each type.
	fmt.Fprint(b, "// isDuplicate() functions\n\n")
	for _, name := range namedTypes {

		o := scope.Lookup(name)
		st, _ := getTypeStruct(o.Type(), scope)
		fmt.Fprintf(b, "func (r1 *%s) isDuplicate(_r2 RR) bool {\n", name)
		fmt.Fprintf(b, "r2, ok := _r2.(*%s)\n", name)
		fmt.Fprint(b, "if !ok { return false }\n")
		fmt.Fprint(b, "_ = r2\n")
	loop:
		for i := 1; i < st.NumFields(); i++ {
			field := st.Field(i).Name()
			o2 := func(s string) { fmt.Fprintf(b, s+"\n", field, field) }

			matched := true
			switch st.Tag(i) {
			case `dns:"-"`:
				// ignored
			case `dns:"a"`, `dns:"aaaa"`:
				o2("if r1.%s != r2.%s {\nreturn false\n}")
			case `dns:"cdomain-name"`:
				o2("if !isDuplicateName(r1.%s, r2.%s) {\nreturn false\n}")
			case `dns:"ipsechost"`, `dns:"amtrelayhost"`:
				o2("if !isDuplicateGateway(r1.GatewayType, r1.GatewayAddr, r2.GatewayAddr, r1.%s, r2.%s) {\nreturn false\n}")
			default:
				matched = false
			}
			if matched {
				continue
			}

			switch ft := st.Field(i).Type().(type) {
			case *types.Named:
				switch ft.Obj().Name() {
				case "Name":
					o2("if !isDuplicateName(r1.%s, r2.%s) {\nreturn false\n}")
					continue loop
				}
			case *types.Slice:
				switch st.Tag(i) {
				case `dns:"domain-name"`, `dns:"apl"`, `dns:"pairs"`:
					// pass
				default:
					o2("if !slices.Equal(r1.%s, r2.%s) {\nreturn false\n}")
					continue loop
				}

				o2("if len(r1.%s) != len(r2.%s) {\nreturn false\n}")

				switch st.Tag(i) {
				case `dns:"domain-name"`:
					o2(`for i, v := range r1.%s {
						if !isDuplicateName(v, r2.%s[i]) {
							return false
						}
					}`)
				case `dns:"apl"`:
					o2(`for i, v := range r1.%s {
						if !v.equals(&r2.%s[i]) {
							return false
						}
					}`)
				case `dns:"pairs"`:
					o2(`if !areSVCBPairArraysEqual(r1.%s, r2.%s) {
						return false
					}`)
				}
				continue loop
			}

			// fallback
			o2("if r1.%s != r2.%s {\nreturn false\n}")
		}
		fmt.Fprint(b, "return true\n}\n\n")
	}

	// gofmt
	res, err := format.Source(b.Bytes())
	if err != nil {
		b.WriteTo(os.Stderr)
		log.Panic(err)
	}

	// write result
	f, err := os.Create("zduplicate.go")
	fatalIfErr(err)
	defer f.Close()
	f.Write(res)
}

func fatalIfErr(err error) {
	if err != nil {
		log.Panic(err)
	}
}
