//go:build ignore

// msg_generate.go is meant to run with go generate. It will use
// go/{importer,types} to track down all the RR struct types. Then for each type
// it will generate pack/unpack methods based on the struct tags. The generated source is
// written to zmsg.go, and is meant to be checked into git.
package main

import (
	"bytes"
	"fmt"
	"go/format"
	"go/types"
	"log"
	"os"
	"strings"

	"golang.org/x/tools/go/packages"
)

var packageHdr = `
// Code generated by "go run msg_generate.go"; DO NOT EDIT.

package dns

import "fmt"
`

// getTypeStruct will take a type and the package scope, and return the
// (innermost) struct if the type is considered a RR type (currently defined as
// those structs beginning with a RR_Header, could be redefined as implementing
// the RR interface). The bool return value indicates if embedded structs were
// resolved.
func getTypeStruct(t types.Type, scope *types.Scope) (*types.Struct, bool) {
	st, ok := t.Underlying().(*types.Struct)
	if !ok {
		return nil, false
	}
	if st.NumFields() == 0 {
		return nil, false
	}
	if st.Field(0).Type() == scope.Lookup("RR_Header").Type() {
		return st, false
	}
	if st.Field(0).Anonymous() {
		st, _ := getTypeStruct(st.Field(0).Type(), scope)
		return st, true
	}
	return nil, false
}

// loadModule retrieves package description for a given module.
func loadModule(name string) (*types.Package, error) {
	conf := packages.Config{Mode: packages.NeedTypes | packages.NeedTypesInfo}
	pkgs, err := packages.Load(&conf, name)
	if err != nil {
		return nil, err
	}
	return pkgs[0].Types, nil
}

func main() {
	// Import and type-check the package
	pkg, err := loadModule("github.com/monoidic/dns")
	fatalIfErr(err)
	scope := pkg.Scope()

	// Collect actual types (*X)
	var namedTypes []string
	for _, name := range scope.Names() {
		o := scope.Lookup(name)
		if o == nil || !o.Exported() {
			continue
		}
		if st, _ := getTypeStruct(o.Type(), scope); st == nil {
			continue
		}
		if name == "PrivateRR" {
			continue
		}

		// Check if corresponding TypeX exists
		if scope.Lookup("Type"+o.Name()) == nil && o.Name() != "RFC3597" {
			log.Panicf("Constant Type%s does not exist.", o.Name())
		}

		namedTypes = append(namedTypes, o.Name())
	}

	b := &bytes.Buffer{}
	b.WriteString(packageHdr)

	fmt.Fprint(b, "// pack*() functions\n\n")
	for _, name := range namedTypes {
		o := scope.Lookup(name)
		st, _ := getTypeStruct(o.Type(), scope)

		fmt.Fprintf(b, "func (rr *%s) pack(msg []byte, off int, compression compressionMap, compress bool) (off1 int, err error) {\n", name)
		for i := 1; i < st.NumFields(); i++ {
			o := func(s string) {
				fmt.Fprintf(b, s, st.Field(i).Name())
				fmt.Fprint(b, `if err != nil {
return off, err
}
`)
			}

			if _, ok := st.Field(i).Type().(*types.Slice); ok {
				switch st.Tag(i) {
				case `dns:"-"`: // ignored
				case `dns:"opt"`:
					o("off, err = packDataOpt(rr.%s, msg, off)\n")
				case `dns:"pairs"`:
					o("off, err = packDataSVCB(rr.%s, msg, off)\n")
				case `dns:"domain-name"`:
					o("off, err = packDataDomainNames(rr.%s, msg, off, compression, false)\n")
				case `dns:"apl"`:
					o("off, err = packDataApl(rr.%s, msg, off)\n")
				default:
					log.Panicln(name, st.Field(i).Name(), st.Tag(i))
				}
				continue
			}

			if tag := st.Tag(i); strings.HasPrefix(tag, `dns:"size-hex`) || strings.HasPrefix(tag, `dns:"size-base32`) || strings.HasPrefix(tag, `dns:"size-base64`) {
				o("off, err = packByteField(rr.%s, msg, off)\n")
				continue
			}

			matched := true
			switch st.Tag(i) {
			case `dns:"-"`: // ignored
			case `dns:"cdomain-name"`:
				o("off, err = packDomainName(rr.%s, msg, off, compression, compress)\n")
			case `dns:"a"`:
				o("off, err = packDataA(rr.%s, msg, off)\n")
			case `dns:"aaaa"`:
				o("off, err = packDataAAAA(rr.%s, msg, off)\n")
			case `dns:"uint48"`, `dns:"eui48"`:
				o("off, err = packUint48(rr.%s, msg, off)\n")
			case `dns:"octet"`:
				o("off, err = packTxtString(rr.%s, msg, off)\n")
			case `dns:"ipsechost"`, `dns:"amtrelayhost"`:
				o("off, err = packIPSECGateway(rr.GatewayAddr, rr.%s, msg, off, rr.GatewayType&0x7f, compression)\n")
			case "", `dns:"eui64"`, `dns:"baretxt"`, `dns:"hex"`, `dns:"base32"`, `dns:"base64"`, `dns:"length"`:
				matched = false
			default:
				log.Panicln(name, st.Field(i).Name(), st.Tag(i))
			}

			if matched {
				continue
			}

			switch ft := st.Field(i).Type().(type) {
			case *types.Basic:
				switch ft.Kind() {
				case types.Uint8:
					o("off, err = packUint8(rr.%s, msg, off)\n")
				case types.Uint16:
					o("off, err = packUint16(rr.%s, msg, off)\n")
				case types.Uint32:
					o("off, err = packUint32(rr.%s, msg, off)\n")
				case types.Uint64:
					o("off, err = packUint64(rr.%s, msg, off)\n")
				default:
					log.Panicln(name, st.Field(i).Name())
				}
			case *types.Named:
				switch ft.Obj().Name() {
				case "Name":
					o("off, err = packDomainName(rr.%s, msg, off, compression, false)\n")
				case "TxtString":
					o("off, err = packTxtString(rr.%s, msg, off)\n")
				case "TxtStrings":
					o("off, err = packTxt(rr.%s, msg, off)\n")
				case "ByteField":
					o("off, err = packByteField(rr.%s, msg, off)\n")
				case "Type":
					o("off, err = packUint16(uint16(rr.%s), msg, off)\n")
				case "Time":
					o("off, err = packUint32(uint32(rr.%s), msg, off)\n")
				case "TypeBitMap":
					o("off, err = packTypeBitMap(rr.%s, msg, off)\n")
				default:
					log.Panicln(name, st.Field(i).Name(), st.Tag(i))
				}
			default:
				log.Panicln(name, st.Field(i).Name(), st.Tag(i))
			}
		}
		fmt.Fprint(b, "return off, nil }\n\n")
	}

	fmt.Fprint(b, "// unpack*() functions\n\n")
	for _, name := range namedTypes {
		o := scope.Lookup(name)
		st, _ := getTypeStruct(o.Type(), scope)

		fmt.Fprintf(b, "func (rr *%s) unpack(msg []byte, off int) (off1 int, err error) {\n", name)
		fmt.Fprint(b, `rdStart := off
_ = rdStart

`)
		for i := 1; i < st.NumFields(); i++ {
			o := func(s string) {
				fmt.Fprintf(b, s, st.Field(i).Name())

				err_name := name
				if name != st.Field(i).Name() {
					err_name += "." + st.Field(i).Name()
				}
				fmt.Fprintf(b, `if err != nil {
return off, fmt.Errorf("%s: %%w", err)
}
`, err_name)
			}

			// size-* are special, because they reference a struct member we should use for the length.
			if strings.HasPrefix(st.Tag(i), `dns:"size-`) {
				structMember := structMember(st.Tag(i))
				structTag := structTag(st.Tag(i))
				switch structTag {
				case "hex", "base32", "base64":
					fmt.Fprintf(b, "rr.%s, off, err = unpackByteField(msg, off, off + int(rr.%s))\n", st.Field(i).Name(), structMember)
				default:
					log.Panicln(name, st.Field(i).Name(), st.Tag(i))
				}
				fmt.Fprint(b, `if err != nil {
return off, err
}
`)
				continue
			}

			if _, ok := st.Field(i).Type().(*types.Slice); ok {
				switch st.Tag(i) {
				case `dns:"-"`: // ignored
				case `dns:"opt"`:
					o("rr.%s, off, err = unpackDataOpt(msg, off)\n")
				case `dns:"pairs"`:
					o("rr.%s, off, err = unpackDataSVCB(msg, off)\n")
				case `dns:"domain-name"`:
					o("rr.%s, off, err = unpackDataDomainNames(msg, off, rdStart + int(rr.Hdr.Rdlength))\n")
				case `dns:"apl"`:
					o("rr.%s, off, err = unpackDataApl(msg, off)\n")
				default:
					log.Panicln(name, st.Field(i).Name(), st.Tag(i))
				}
				continue
			}

			switch st.Tag(i) {
			case `dns:"-"`: // ignored
			case `dns:"cdomain-name"`:
				o("rr.%s, off, err = UnpackDomainName(msg, off, true)\n")
			case `dns:"a"`:
				o("rr.%s, off, err = unpackDataA(msg, off)\n")
			case `dns:"aaaa"`:
				o("rr.%s, off, err = unpackDataAAAA(msg, off)\n")
			case `dns:"uint48"`, `dns:"eui48"`:
				o("rr.%s, off, err = unpackUint48(msg, off)\n")
			case `dns:"eui64"`:
				o("rr.%s, off, err = unpackUint64(msg, off)\n")
			case `dns:"octet"`:
				o("rr.%s, off, err = unpackString(msg, off)\n")
			case `dns:"ipsechost"`, `dns:"amtrelayhost"`:
				o("rr.GatewayAddr, rr.%s, off, err = unpackIPSECGateway(msg, off, rr.GatewayType&0x7f)\n")
			case `dns:"baretxt"`, `dns:"hex"`, `dns:"base32"`, `dns:"base64"`, `dns:"length"`:
				fallthrough // unpack function is the same as the generic one
			case "":
				switch ft := st.Field(i).Type().(type) {
				case *types.Basic:
					switch ft.Kind() {
					case types.Uint8:
						o("rr.%s, off, err = unpackUint8(msg, off)\n")
					case types.Uint16:
						o("rr.%s, off, err = unpackUint16(msg, off)\n")
					case types.Uint32:
						o("rr.%s, off, err = unpackUint32(msg, off)\n")
					case types.Uint64:
						o("rr.%s, off, err = unpackUint64(msg, off)\n")
					default:
						log.Panicln(name, st.Field(i).Name())
					}
				case *types.Named:
					switch ft.Obj().Name() {
					case "Name":
						o("rr.%s, off, err = UnpackDomainName(msg, off, false)\n")
					case "TxtString":
						o("rr.%s, off, err = unpackString(msg, off)\n")
					case "TxtStrings":
						o("rr.%s, off, err = unpackTxt(msg, off)\n")
					case "ByteField":
						o("rr.%s, off, err = unpackByteField(msg, off, rdStart + int(rr.Hdr.Rdlength))\n")
					case "Type":
						o("rr.%s, off, err = unpackType(msg, off)\n")
					case "Time":
						o("rr.%s, off, err = unpackTime(msg, off)\n")
					case "TypeBitMap":
						o("rr.%s, off, err = unpackTypeBitMap(msg, off)\n")
					default:
						log.Panicln(name, st.Field(i).Name())
					}
				default:
					log.Panicln(name, st.Field(i).Name())
				}
			default:
				log.Panicln(name, st.Field(i).Name(), st.Tag(i))
			}
		}
		fmt.Fprintf(b, "return off, nil }\n\n")
	}

	// gofmt
	res, err := format.Source(b.Bytes())
	if err != nil {
		b.WriteTo(os.Stderr)
		log.Panic(err)
	}

	// write result
	f, err := os.Create("zmsg.go")
	fatalIfErr(err)
	defer f.Close()
	f.Write(res)
}

// structMember will take a tag like dns:"size-base32:SaltLength" and return the last part of this string.
func structMember(s string) string {
	idx := strings.LastIndex(s, ":")
	return strings.TrimSuffix(s[idx+1:], `"`)
}

// structTag will take a tag like dns:"size-base32:SaltLength" and return base32.
func structTag(s string) string {
	s = strings.TrimPrefix(s, `dns:"size-`)
	s, _, _ = strings.Cut(s, ":")
	return s
}

func fatalIfErr(err error) {
	if err != nil {
		log.Panic(err)
	}
}
